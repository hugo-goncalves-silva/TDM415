III Recherche dichotomique dans un tableau

1. Exécutez « à la main » la méthode rechercheVite du nombre 17 sur le tableau suivant :
int[] tab = {3, 6, 15, 21, 30, 33, 35, 40}.

gauche = 0
droite = 7
while ( 0 <= 7){        //tab = {3, 6, 15, 21, 30, 33, 35, 40}
    milieu = 3
    if( 17 == tab[3] ) <---- tab[3] = 21
        FAUX
    if( 17 < tab[3] )
        droite = 3 - 1 = 2
}
            while(0 <= 2){          //tab = {3, 6, 15}
                milieu = 1
                if( 17 == tab[1] ) <---- tab[1] = 6
                    FAUX
                if( 17 < tab[1] )
                    FAUX
                else
                    gauche = 1 + 1 = 2
            }
                        while( 2 <= 2 ){        //tab = {15}
                            milieu = 2
                            if( 17 == tab[2] ) <---- tab[2] = 15
                                FAUX
                            if( 17 < tab[2] )
                                FAUX
                            else
                                gauche = 2 + 1 = 3
                        }
                                    while(3 <= 2) FAUX
return -1

2. Quel est le nombre minimum d’étapes pour la rechercheVite d’un entier x dans un
tableau de taille n? Donnez au moins un exemple.

Le nombre minimum d'étapes serait 1 si la valeur recherché se trouve au milieu du tableau instantanément.

exemple :
int[] tab = {3, 6, 15, 21, 30}
x = 15

gauche = 0
droite = 4
while ( 0 <= 4){        //tab = {3, 6, 15, 21, 30}
    milieu = 2
    if( 15 == tab[2] ) <---- tab[2] = 15
        return 2
}

3. Quel est le nombre maximum d’étapes pour la rechercheVite d’un entier x dans un
tableau de taille n? Donnez des exemples.

Le nombre maximum d'étapes est égale a n/2. Si x n'est pas dans tab.

int[] tab = {3, 6, 15, 21, 30}
x = 31 ou x = 4 ou x = 7 ....


4. Dans la méthode rechercheVite on remplace la ligne 10 « droite = milieu -
1; » par « droite = milieu; ». Expliquez quel problème de correction peut se poser.
Par exemple, vous exécuterez la méthode rechercheVite du nombre 34 sur ce tableau :
int[] tab = {3, 6, 15, 21, 30, 33, 35, 40};


int[] tab = {3, 6, 15, 21, 30, 33, 35, 40}.

gauche = 0
droite = 7
while ( 0 <= 7){        //tab = {3, 6, 15, 21, 30, 33, 35, 40}
    milieu = 3
    if( 34 == tab[3] ) <---- tab[3] = 21
        FAUX
    if( 34 < tab[3] )
        FAUX
    else
        gauche = 3 + 1 = 4 
}
            while(4 <= 7){          //tab = {30, 33, 35, 40}
                milieu = 5
                if( 34 == tab[5] ) <---- tab[5] = 33
                    FAUX
                if( 34 < tab[5] )
                    FAUX
                else
                    gauche = 5 + 1 = 6
            }
                        while( 6 <= 7 ){        //tab = {35, 40}
                            milieu = 6
                            if( 34 == tab[6] ) <---- tab[6] = 35
                                FAUX
                            if( 34 < tab[6] )
                                droite = 6
                        }
                                while( 6 <= 6 ){        //tab = {35}
                                milieu = 6
                                if( 34 == tab[6] ) <---- tab[6] = 35
                                    FAUX
                                if( 34 < tab[6] )
                                    droite = 6
                            }
                            ...... Boucle infinie

Si la valeur recherchée est trop petite par rapport au tableau la variable "droite" ne descendra jamais en dessous de la variable "gauche" puisque droite = milieu et que milieu = (gauche + droite)/2 donc une boucle infinie sera créée.


